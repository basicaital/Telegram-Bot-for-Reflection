from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from .states import MoodForm, JournalForm, NavigationForm
from bot_app.services.mood_tracker import MoodTracker
from bot_app.services.motivation import get_motivation
from bot_app.services.journal import Journal
from .keyboards import InlineBuilder

start_router = Router()


def main_keyboard():
    return InlineBuilder.get_main_menu()


@start_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    welcome_message = (
        "<b>–ü—Ä–∏–≤–µ—Ç! üåü –¢–∞–∫ –∑–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –≤—ã –∑–¥–µ—Å—å! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –¥—Ä—É–≥, –≥–æ—Ç–æ–≤—ã–π –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å –≤ –ª—é–±–æ–π "
        "—Å–∏—Ç—É–∞—Ü–∏–∏.</b>\n\n "
        "–í–æ—Ç, —á—Ç–æ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ:\n"
        "üîπ –û—Ü–µ–Ω–∏—Ç—å –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        "üîπ –ó–∞–ø–∏—Å–∞—Ç—å –≤–∞—à–∏ –º—ã—Å–ª–∏ –≤ –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏—Ç—å –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã\n"
        "üîπ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å—Å—è –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã–º\n\n"
        "–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–º–Ω–æ–≥–æ —è—Ä—á–µ –∏ —É—é—Ç–Ω–µ–µ! –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ, "
        "–∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –≤–∞–º. üòäüí´ "
    )
    await message.answer(welcome_message, reply_markup=main_keyboard())
    await state.clear()


@start_router.callback_query(F.data == 'rate_mood')
async def rate_mood(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    await query.message.answer('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–æ–µ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10?',
                               reply_markup=InlineBuilder.get_mood_rating())
    await state.set_state(MoodForm.mood)


@start_router.callback_query(MoodForm.mood, F.data.startswith("mood_"))
async def mood_handler(query: CallbackQuery, state: FSMContext):
    try:
        await query.message.delete()
        mood = int(query.data.split("_")[1])
        if mood < 1 or mood > 10:
            raise ValueError('Mood out of range')
        MoodTracker.save_mood(query.from_user.id, mood)
        advice = get_motivation(mood)
        await query.message.answer(advice)
        await state.clear()
        await query.message.answer('–•–æ—Ç–∏—Ç–µ –ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É?', reply_markup=InlineBuilder.get_write_choice())
    except ValueError:
        await query.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.')


@start_router.callback_query(F.data == 'write_entry')
async def add_journal_entry(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    await query.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–ø–∏—Å—å –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞:')
    await state.set_state(JournalForm.entry)


@start_router.message(JournalForm.entry)
async def save_journal_entry(message: Message, state: FSMContext):
    entry = message.text
    Journal.add_entry(message.from_user.id, entry)
    await message.answer('–í–∞—à–∞ –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.', reply_markup=InlineBuilder.get_watch_kb())
    await state.clear()


@start_router.message(Command('add_entry'))
async def add_entry(message: Message):
    await message.answer("–†–µ—Ñ–ª–µ–∫—Å–∏—Ä—É–π—Ç–µ", reply_markup=InlineBuilder.get_write_kb())


@start_router.callback_query(F.data == 'watch_entries')
async def inline_view_entries(callback_query: CallbackQuery, state: FSMContext):
    entries = Journal.get_entries(callback_query.from_user.id)
    if entries == '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π':
        await callback_query.message.edit_text(entries)
        return
    first_entry = Journal.get_entry_by_index(callback_query.from_user.id, 0)
    if first_entry:
        entry_text = f"{first_entry['timestamp']}: \n{first_entry['entry']}"
        await callback_query.message.edit_text(entry_text,
                                               reply_markup=InlineBuilder.get_navigation(0,
                                                                                         callback_query.from_user.id))
        await state.update_data(current_index=0)
        await state.set_state(NavigationForm.current_index)


@start_router.callback_query(F.data.in_({'prev_entry', 'next_entry'}))
async def navigation_entry(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data.get('current_index', 0)

    if query.data == 'prev_entry':
        current_index = max(0, current_index - 1)
    elif query.data == 'next_entry':
        current_index += 1

    entry = Journal.get_entry_by_index(query.from_user.id, current_index)
    if entry:
        entry_text = f"{entry['timestamp']}: \n{entry['entry']}"
        await query.message.edit_text(entry_text,
                                      reply_markup=InlineBuilder.get_navigation(current_index, query.from_user.id))
        await state.update_data(current_index=current_index)
    else:
        await query.message.edit_text('–ë–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π',
                                      reply_markup=InlineBuilder.get_navigation(current_index, query.from_user.id))


@start_router.callback_query(F.data == "cancelling")
async def cancel_choice(query: CallbackQuery):
    await query.message.edit_text("–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")





